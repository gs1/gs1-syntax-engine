X.X.X

* Core: Additional sanity checks were added to the domain part of GS1 DL URIs.
* Core: A framework was added for overriding the heap-management functions of the library which may be used for activities such as custom memory profiling.
* Core: Support was added for DotCode and GS1 DotCode scandata.
* Core: All data transformation routines were significantly optimised for runtime performance.
* JS: Added an example node.js web service application to transform GS1 data, which may be useful in the event that the library or its bindings cannot be integrated directly.
* Java: Windows support was added for building the wrapper and example application.


1.2.0

* Update to Syntax Dictionary release 2025-01-30
* JS: The browser example app was amended to replace all instances of "{GS}", not just the first.
* Core: The scandata processor was amended to not strip terminal GS characters.
* Core: The GS1 DL URI processor was fixed to not truncate AI values derived from URI components that contain percent-encoded null characters.
* Core: The Syntax Dictionary parser was amended to be tolerant of DOS-style line endings.
* Core: A new error message translations framework was adopted. No user-visible changes for a regular build.


1.1.0

* Update to Syntax Dictionary release 2024-06-10
* New SemVar versioning scheme, required to maintain parity with npmjs el al.
* Core: Permit GS1 DL URIs with an uppercase scheme.
* Core: Support added for new "?" flag in Syntax Dictionary to denote AIs permitted as GS1 DL URI data attributes.
* Core: New validation toggle to permit unknown AIs to be GS1 DL URI data attributes, to support close application and to enable gracefully degradation if Syntax Dictionary is out of date.
* Core: Name shared library to have .dylib extension on MacOS.
* Core: Build process updated to ease use of cross-compilers, such as MinGW for building Windows DLLs within MSVC.
* Core: Expose typedefs for symbologies and validations enums.
* Wrappers: Update API to use symbologies typedef instead of plain int.
* Java: Build process for example app amended to treat warnings as errors.
* Java: The use of a deprecated API call by the example app was fixed.
* Java: The JNI library now statically links the Syntax Engine in order to ease distribution.
* Java: Add support for MacOS.
* JS: Support for publishing assets to npmjs.
* JS: Build process updated to support recent Emscripten version that do not generate a .mem file with "jsonly" builds.
* JS: Getters of boolean parameters now return true/false rather than 1/0.
* Android: Freshen dependencies and use a recent cmake.


2023-12-11

* Core: New DIGSIG_SERIAL_KEY validation function to ensure that keys include a serial component when used with AI (8030).
* Core: Support for new Syntax Dictionary AI group syntax (e.g. "01+21") for req attributes where each listed AI must be present to be a satisfactory the constraint.
* Core: Ensure that valid key-qualifier AIs appear in path info, where possible, rather than in query parameters.
* Java: Build process amended to treat warnings as errors.
* Where possible, use compiler and language features to mark deprecated functions as such in C library and bindings.
* Update to Syntax Dictionary release 2023-12-11.


2023-11-20

* Core: New "validation function table" feature was added with corresponding
  {get,set}ValidationEnabled API options. Allows global validation checks (e.g.
  AI mandatory associations) to be differentiated and enabled/disabled by the
  library user.
* Wrappers: Add support for new {get,set}ValidationEnabled API functions.
* Core: {get,set}ValidateAIassociations API functions are now deprecated since
  the new validation function table functionality subsumes the legacy
  functionality.
* Core: Deprecated setValidateAIassociations no longer disables
  mutually-exclusive AI validation. (Mutually-exclusive AI validation is now
  mandatory.)
* Wrappers: Replace deprecated {get,set}ValidateAIassociations API functions
  with new {get,set}ValidationEnabled.
* MSVC: Build process amended to treat warnings as errors.
* C: Applied maximal const declarations throughout library.


2023-07-05

* Update to Syntax Dictionary release 2023-07-04.
* C: Expose "permit zero-suppressed GTIN in GS1 DL URIs" option in console example.
* C# .NET: Expose "permit zero-suppressed GTIN in GS1 DL URIs" option in the
  desktop app.
* JS: Expose "permit zero-suppressed GTIN in GS1 DL URIs" option in the Node.js
  application.
* JS: Expose "permit zero-suppressed GTIN in GS1 DL URIs" option in the browser
  application.
* Core: Don't report empty AI elements as "too long" in GS1 DL URIs.
* Core: In a GS1 Digital Link URI, a "+" character should only be interpreted
  as space in a query parameter, not a path component, per rules for
  interpretation of URIs and CGI.
* Core: In GS1 Digital Link URIs, represent "+" characters in AI expressed in
  path info as "%2B", per GS1 preference.
* Core: Add support for GenSpecs CSET 64 required by Digital Signatures.
* Core: New permitZeroSuppressedGTINinDLuris API option (default false) since
  GTIN-{8,12,13} use is now deprecated by the GS1 Digital Link standard.
* Wrappers: Support for new permitZeroSuppressedGTINinDLuris API option.


2023-03-22

* Update to Syntax Dictionary release 2023-03-22.
* JS: Minor tweaks to the HTML application.


2023-01-21

* JS: New "jsonly" asset which is compiled to pure JavaScript without the need
  for WASM.
* Core: copyHRI and copyDLignoredQueryParams API function are now deprecated.
* JS: Update wrapper to use getHRI and getDLignoredQueryParams instead of
  deprecated functions.


2022-12-11

* Android: App was enhanced to use ML kit to read barcodes from a device's
  camera.
* iOS: App was enhanced to use ML kit to read barcodes from a device's camera.
* JS: Node.js app amended so that HRI shows when input is not AI data.


2022-11-24-1

* Update to Syntax Dictionary release 2022-11-24.


2022-11-24

* Android: New app programmed in Kotlin.
* iOS: New app programmed in Swift.
* Java: Console app enhanced to have parity with other console demos.
* JS: Node.js application change to use native readline/promises module.


2022-09-03

* JS: Node.js application was enhanced.
* JS: API wrapper fixes to allow generation of GS1 DL URIs with a user-provided
  stem.
* JS: Targets renamed from .js to .mjs since they are modular ECMAScript 6.


2022-08-10

* Initial release.
